// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizMaker.Database;

#nullable disable

namespace QuizMaker.Database.Migrations
{
    [DbContext(typeof(QuizMakerContext))]
    partial class QuizMakerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.Property<long>("QuestionsId")
                        .HasColumnType("bigint")
                        .HasColumnName("questions_id");

                    b.Property<long>("QuizzesId")
                        .HasColumnType("bigint")
                        .HasColumnName("quizzes_id");

                    b.HasKey("QuestionsId", "QuizzesId")
                        .HasName("pk_question_quiz");

                    b.HasIndex("QuizzesId")
                        .HasDatabaseName("ix_question_quiz_quizzes_id");

                    b.ToTable("question_quiz", (string)null);
                });

            modelBuilder.Entity("QuizMaker.Database.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("correct_answer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("QuestionPhrase")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_phrase");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("QuizMaker.Database.Entities.Quiz", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_quizzes");

                    b.ToTable("quizzes", (string)null);
                });

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.HasOne("QuizMaker.Database.Entities.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_quiz_questions_questions_id");

                    b.HasOne("QuizMaker.Database.Entities.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_quiz_quizzes_quizzes_id");
                });
#pragma warning restore 612, 618
        }
    }
}
